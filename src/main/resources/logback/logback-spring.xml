<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration>
<configuration>
    <!-- 콘솔에 로그를 남긴다. -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!-- %d:로그기록시간, %thread:현재 Thread 이름, %-3level:로그레벨 -3은 출력의 고정폭(3글자)
                 %logger{5}:축약된 logger name 5는 최대 자릿수, %msg:로그메시지, %n:줄바꿈 -->
            <pattern>%d{yyyyMMdd HH:mm:ss.SSS} [%thread] %-3level %logger{5} - %msg %n</pattern>
        </encoder>
    </appender>

    <!-- log4jdbc 옵션 설정 -->
    <logger name="jdbc" level="OFF" />
    <!-- 커넥션 open close 이벤트를 로그로 남긴다. -->
    <logger name="jdbc.connection" level="OFF" />
    <!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. -->
    <logger name="jdbc.sqlonly" level="OFF" />
    <!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. -->
    <logger name="jdbc.sqltiming" level="DEBUG" />
    <!--
    ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다.
    많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다.
    -->
    <logger name="jdbc.audit" level="OFF" />
    <!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. -->
    <logger name="jdbc.resultset" level="OFF" />
    <!-- SQL 결과 조회된 데이터의 table을 로그로 남긴다. -->
<!--    <logger name="jdbc.resultsettable" level="INFO" additivity="false">-->
<!--        <appender-ref ref="STDOUT" />-->
<!--    </logger>-->

    <root level="INFO">
        <appender-ref ref="STDOUT" />
    </root>

</configuration>